import { Constants } from "constants.slint";
import { DeckNode, DeckTree, CardNode } from "types.slint";
import { LearnScreen } from "screens/learn.slint";
import { DeckSelectScreen } from "screens/deck_select.slint";

export component MainWindow inherits Window {
    preferred-width: 500px;
    preferred-height: 400px;
    in-out property <bool> learning;
    in-out property <CardNode> current_card;

    in-out property <DeckTree> deck_tree;
    in property <string> dummy: "ÄÖÜäöüßÀÂÆÇÈÉÊËÎÏÔŒÙÛàâæçèéêëîïôœùû„“”‘’—–@&$%+=¡¿¢£$¥€²³¼½¬¤¦§©®™°";

    callback update_deck_tree();
    callback deck_clicked(deck: DeckNode);
    callback rate(rating: int, deck: DeckNode);

    VerticalLayout {
        padding: Constants.padding_standard;
        if !learning: DeckSelectScreen {
            due_total: deck_tree.due_total;
            deck_nodes: deck_tree.deck_nodes;
            deck_clicked(deck) => {
                deck_clicked(deck);
                learning = true;
            }
        }
        if learning: LearnScreen {
            card: current_card;
            home_clicked => {
                update_deck_tree();
                learning = false;
            }
            rate(rating) => {
                rate(rating, current_card.deck);
            }
        }
    }
}
